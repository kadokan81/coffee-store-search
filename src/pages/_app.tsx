import useTrackLocation from '@/hooks/useTrackLocation';
import '@/styles/globals.css';
import { CoffeeShopsResult } from '@/typesFolder';
import type { AppProps } from 'next/app';
import Head from 'next/head';
import { Dispatch, PropsWithChildren, createContext, useReducer } from 'react';

type contextStateType = {
	latLong: string;
	coffeeStores: CoffeeShopsResult[];
};

type GetUserLocationAction = {
	type: 'SET_LAT_LONG';
	payload: {
		latLong: string;
	};
};

type GetCoffeeStoreDataAction = {
	type: 'SET_COFFEE_STORES';
	payload: {
		coffeeStores: CoffeeShopsResult[];
	};
};

type StoredReducerActions = GetCoffeeStoreDataAction | GetUserLocationAction;

const storeReducer = (
	state: contextStateType,
	action: StoredReducerActions
) => {
	switch (action.type) {
		case 'SET_COFFEE_STORES': {
			return { ...state, coffeeStores: action.payload.coffeeStores };
		}
		case 'SET_LAT_LONG': {
			return { ...state, latLong: action.payload.latLong };
		}

		default:
			return state;
	}
};

type StoreContextState = {
	latLong: string | undefined;
	coffeeStores: CoffeeShopsResult[] | [];
	dispatch: Dispatch<StoredReducerActions>;
};

export const StoreContext = createContext<StoreContextState>({
	latLong: '',
	coffeeStores: [],
} as StoreContextState);

const StoreProvider = ({ children }: PropsWithChildren) => {
	// const { latLong, locationErrorMsg, isFindingLocation } = useTrackLocation();

	const initialState = {
		latLong: '',
		coffeeStores: [],
	};

	const [state, dispatch] = useReducer(storeReducer, initialState);

	const { latLong, coffeeStores } = state;

	return (
		<StoreContext.Provider value={{ latLong, coffeeStores, dispatch }}>
			{children}
		</StoreContext.Provider>
	);
};

export default function App({ Component, pageProps }: AppProps) {
	return (
		<>
			<Head>
				<title>üßÅ Coffee Connoisseur </title>
				<meta name='description' content='Generated by create next app' />
				<meta name='viewport' content='width=device-width, initial-scale=1' />
			</Head>
			<StoreProvider>
				<Component {...pageProps} />
			</StoreProvider>
		</>
	);
}
